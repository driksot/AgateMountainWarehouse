// <auto-generated />
using System;
using AgateMountainWarehouse.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgateMountainWarehouse.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20221231032546_AddCustomerIdToSalesOrder")]
    partial class AddCustomerIdToSalesOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8917aa6d-2655-4108-a520-b0da674bc44c"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("ffbc3199-8546-4699-a532-c10a32c564cc"),
                            QuantityOnHand = 4
                        },
                        new
                        {
                            Id = new Guid("999d4d12-8d9d-4315-a389-16b210e28dbd"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("b8552865-4078-4e4b-8d20-ff0d14d87d8d"),
                            QuantityOnHand = 7
                        },
                        new
                        {
                            Id = new Guid("297c9f85-d80c-40e5-810f-38ace3e79155"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("6f6977f5-a099-4add-94f3-1fdcb5e06b92"),
                            QuantityOnHand = 3
                        },
                        new
                        {
                            Id = new Guid("afcd2641-40ae-4e23-afbc-0266e68ee293"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("4ef32bc9-536f-4231-8934-f3ce9d48d111"),
                            QuantityOnHand = 4
                        },
                        new
                        {
                            Id = new Guid("b3f5dc4d-0a08-44c4-8248-88e0f984662f"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("9af4201d-22d7-4579-bc40-341f345cb747"),
                            QuantityOnHand = 12
                        },
                        new
                        {
                            Id = new Guid("b71b18b6-cd89-4ab8-9bf1-8aa662ae36a1"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("1c5ab034-4ba0-4fb5-9f07-13b06d8f155b"),
                            QuantityOnHand = 8
                        },
                        new
                        {
                            Id = new Guid("167671fc-f78d-43cf-ba73-cdee13baf1cd"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("7aad8902-45d5-4185-a2e6-cf466abbbb84"),
                            QuantityOnHand = 11
                        },
                        new
                        {
                            Id = new Guid("2b599210-d7ed-44e6-aa8f-8a27f0d9d057"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("ae5e0036-8551-4dab-9e41-674d27b4a8b2"),
                            QuantityOnHand = 9
                        },
                        new
                        {
                            Id = new Guid("8601d89f-fcb0-4575-9814-ec813127d1ce"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("57aea388-8f33-4975-aea7-a587855d87ee"),
                            QuantityOnHand = 6
                        },
                        new
                        {
                            Id = new Guid("3b362269-0518-40aa-b540-cc66a2c89ba9"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("6fc19f3c-5426-4dd4-a1e2-aaebc14ce18a"),
                            QuantityOnHand = 10
                        },
                        new
                        {
                            Id = new Guid("845e18ef-bcba-4dd5-af16-ab50a6ef93b6"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("6b001338-1a4f-496c-8d26-dee9e111c24d"),
                            QuantityOnHand = 5
                        },
                        new
                        {
                            Id = new Guid("fe0bf302-19b3-46f0-95b5-1c5f32734071"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("ba12294f-779c-425e-a2d0-9a6a69e8c009"),
                            QuantityOnHand = 9
                        },
                        new
                        {
                            Id = new Guid("cb7a6bf2-c1e1-44e5-8b0a-c6b4723f32ce"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("4d1e2f73-94db-4559-b47b-5d7619e39dba"),
                            QuantityOnHand = 10
                        },
                        new
                        {
                            Id = new Guid("cd659b08-d7ae-438e-935b-729bdef5c54f"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("4f8e0392-db1c-4768-8a4f-c54b018f2f81"),
                            QuantityOnHand = 3
                        },
                        new
                        {
                            Id = new Guid("66f04724-681b-4086-8650-2359bb7357e7"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("bc7e516c-5e5b-4949-8384-414cac54e563"),
                            QuantityOnHand = 7
                        },
                        new
                        {
                            Id = new Guid("bb1d4d10-153a-47c5-9751-9413f4a3f7fc"),
                            CreatedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("9465fec5-3ee4-4d25-ba84-69f3ec21336a"),
                            QuantityOnHand = 5
                        });
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.InventorySnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SnapshotQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SnapshotTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InventorySnapshots");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffbc3199-8546-4699-a532-c10a32c564cc"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8569),
                            Description = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.",
                            ImageUrl = "StaticFiles/Images/labradorite.png",
                            IsArchived = false,
                            Name = "Labradorite",
                            Price = 35.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8576)
                        },
                        new
                        {
                            Id = new Guid("b8552865-4078-4e4b-8d20-ff0d14d87d8d"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8585),
                            Description = "Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.",
                            ImageUrl = "StaticFiles/Images/turquoise.png",
                            IsArchived = false,
                            Name = "Turquoise",
                            Price = 20.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8586)
                        },
                        new
                        {
                            Id = new Guid("6f6977f5-a099-4add-94f3-1fdcb5e06b92"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8589),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/star-garnet.jpg",
                            IsArchived = false,
                            Name = "Star Garnet",
                            Price = 25.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8590)
                        },
                        new
                        {
                            Id = new Guid("4ef32bc9-536f-4231-8934-f3ce9d48d111"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8592),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/jasper.jpg",
                            IsArchived = false,
                            Name = "Jasper",
                            Price = 20.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8593)
                        },
                        new
                        {
                            Id = new Guid("9af4201d-22d7-4579-bc40-341f345cb747"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8595),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/fire-opal.jpg",
                            IsArchived = false,
                            Name = "Fire Opal",
                            Price = 18.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8596)
                        },
                        new
                        {
                            Id = new Guid("1c5ab034-4ba0-4fb5-9f07-13b06d8f155b"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8598),
                            Description = "Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.",
                            ImageUrl = "StaticFiles/Images/amethyst.jpg",
                            IsArchived = false,
                            Name = "Amethyst",
                            Price = 22.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8599)
                        },
                        new
                        {
                            Id = new Guid("7aad8902-45d5-4185-a2e6-cf466abbbb84"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8601),
                            Description = "Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.",
                            ImageUrl = "StaticFiles/Images/gold-wire.jpg",
                            IsArchived = false,
                            Name = "26 Gauge Gold Wire",
                            Price = 9.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8602)
                        },
                        new
                        {
                            Id = new Guid("ae5e0036-8551-4dab-9e41-674d27b4a8b2"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8604),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/gold-wire.jpg",
                            IsArchived = false,
                            Name = "24 Gauge Gold Wire",
                            Price = 8.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8604)
                        },
                        new
                        {
                            Id = new Guid("57aea388-8f33-4975-aea7-a587855d87ee"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8607),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/agate.jpg",
                            IsArchived = false,
                            Name = "Agate",
                            Price = 38.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8607)
                        },
                        new
                        {
                            Id = new Guid("6fc19f3c-5426-4dd4-a1e2-aaebc14ce18a"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8610),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/carnelian.jpg",
                            IsArchived = false,
                            Name = "Carnelian",
                            Price = 18.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8611)
                        },
                        new
                        {
                            Id = new Guid("6b001338-1a4f-496c-8d26-dee9e111c24d"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8613),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/malachite.jpg",
                            IsArchived = false,
                            Name = "Malachite",
                            Price = 23.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8614)
                        },
                        new
                        {
                            Id = new Guid("ba12294f-779c-425e-a2d0-9a6a69e8c009"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8616),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/silver-wire.jpg",
                            IsArchived = false,
                            Name = "26 Gauge Silver Wire",
                            Price = 8.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8616)
                        },
                        new
                        {
                            Id = new Guid("4d1e2f73-94db-4559-b47b-5d7619e39dba"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8619),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/silver-wire.jpg",
                            IsArchived = false,
                            Name = "24 Gauge Silver Wire",
                            Price = 7.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8619)
                        },
                        new
                        {
                            Id = new Guid("4f8e0392-db1c-4768-8a4f-c54b018f2f81"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8621),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/copper-wire.jpg",
                            IsArchived = false,
                            Name = "26 Gauge Copper Wire",
                            Price = 7.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8622)
                        },
                        new
                        {
                            Id = new Guid("bc7e516c-5e5b-4949-8384-414cac54e563"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8624),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/copper-wire.jpg",
                            IsArchived = false,
                            Name = "24 Gauge Copper Wire",
                            Price = 6.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8625)
                        },
                        new
                        {
                            Id = new Guid("9465fec5-3ee4-4d25-ba84-69f3ec21336a"),
                            CreatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8628),
                            Description = "Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.",
                            ImageUrl = "StaticFiles/Images/sapphire.jpg",
                            IsArchived = false,
                            Name = "Sapphire",
                            Price = 25.0,
                            UpdatedDateTime = new DateTime(2022, 12, 30, 20, 25, 45, 796, DateTimeKind.Local).AddTicks(8628)
                        });
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.SalesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.SalesOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SalesOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItems");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a00db4cc-04f0-4677-a818-9e3c05dbfe8a",
                            ConcurrencyStamp = "755e05c0-6378-4179-ae13-7e3b4a7306ed",
                            Name = "Empolyee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "d983bc32-c949-497a-8eb2-fb9cef5c69cc",
                            ConcurrencyStamp = "d6bdf823-c036-4f36-a294-9555633f3c52",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.Customer", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.CustomerAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.InventorySnapshot", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.SalesOrder", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.SalesOrderItem", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgateMountainWarehouse.Domain.Entities.SalesOrder", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("SalesOrderId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgateMountainWarehouse.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgateMountainWarehouse.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgateMountainWarehouse.Domain.Entities.SalesOrder", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
