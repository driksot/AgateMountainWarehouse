@page "/customers/admin"

@implements IDisposable

@inject ICustomerHttpRepository CustomerHttpRepository
@inject HttpInterceptorService Interceptor

<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@("Customer Management".ToUpper())</MudText>

<MudTable ServerData="@(new Func<TableState, Task<TableData<CustomerViewModel>>>(ServerReload))"
        Dense="true" Hover="true" Striped="true" Bordered="true" @ref="_table">
    <ToolBarContent>
        <MudButton Href="customer/new"
                DisableElevation
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Add"
                IconColor="Color.Surface">New Customer</MudButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 30%" />
        <col style="width: 30%" />
        <col style="width: 5%" />
        <col style="width: 10%" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="CustomerViewModel">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="address" T="CustomerViewModel">Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="state" T="CustomerViewModel">State</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="since" T="CustomerViewModel">Since</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@($"{context.FirstName} {context.LastName}")</MudTd>
        <MudTd DataLabel="Address">@($"{context.Address.AddressLine1} {context.Address.AddressLine2}")</MudTd>
        <MudTd DataLabel="State">@context.Address.State</MudTd>
        <MudTd DataLabel="Since">@context.CreatedDateTime.ToShortDateString()</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Href="@($"customer/edit/{context.Id}")" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Class="ms-1 my-1">Edit</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="ms-1 my-1">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<CustomerViewModel> _customers = new List<CustomerViewModel>();
    private MudTable<CustomerViewModel> _table = new MudTable<CustomerViewModel>();
    private PagingParameters _pagingParameters = new PagingParameters();
    private string _searchString = string.Empty;

    public PagingMetaData MetaData { get; set; } = new PagingMetaData();

    private async Task<TableData<CustomerViewModel>> ServerReload(TableState state)
    {
        _pagingParameters.SetPrivatePageSize("PageSize", state.PageSize);
        _pagingParameters.PageNumber = state.Page + 1;

        switch (state.SortLabel)
        {
            case "name":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "name desc"
                    : "name";
                break;
            case "address":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "price desc"
                    : "price";
                break;
            case "state":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "state desc"
                    : "state";
                break;
            case "since":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "since desc"
                    : "since";
                break;
        }

        var pagingResponse = await CustomerHttpRepository.GetCustomers(_pagingParameters);
        _customers = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;

        return new TableData<CustomerViewModel>() { TotalItems = MetaData.TotalCount, Items = _customers };
    }

    private void OnSearch(string searchText)
    {
        _pagingParameters.SearchTerm = searchText;
        _table.ReloadServerData();
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
    }
}
