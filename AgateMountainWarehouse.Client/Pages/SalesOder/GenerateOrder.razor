@page "/generateOrder"

@inject IOrderHttpRepository OrderHttpRepository
@inject IProductHttpRepository ProductHttpRepository
@inject IInventoryHttpRepository InventoryHttpRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudElement HtmlTag="section" Class="d-flex justify-space-between align-center">
<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@("Generate Order".ToUpper())</MudText>
    <MudButton Variant="Variant.Filled"
            StartIcon="@Icons.Material.Filled.ArrowBack"
            Color="Color.Secondary"
            Class="ms-2"
            Href="/orders">
        Back
    </MudButton>
</MudElement>

@if (_orderItems.Count > 0)
{
    <EditForm Model="_selectedOrderItem" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudCard Class="pa-4">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="10">
                        <MudSelect @bind-Value="_selectedOrderItem" Label="Product">
                            <MudSelectItem Value="_selectedOrderItem">Select a Product</MudSelectItem>
                            @foreach (var item in _orderItems)
                            {
                                <MudSelectItem Value="@item">@item.Product.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <ValidationMessage For="@(() => _selectedOrderItem.Product)" />
                    </MudItem>
                    <MudItem xs="2">
                        <MudNumericField @bind-Value="@_selectedOrderItem.Quantity" Label="Quantity" Variant="Variant.Text" Min="0" />
                        <ValidationMessage For="@(() => _selectedOrderItem.Quantity)" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions Class="ms-2 pb-2 d-flex justify-end">
                <MudButton Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.Save"
                        Color="Color.Tertiary"
                        ButtonType="MudBlazor.ButtonType.Submit">
                    Add Line Item
                </MudButton>
                <MudButton Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.AddToQueue"
                        Color="Color.Primary"
                        Class="ms-2"
                        @onclick="FinalizeOrder">
                    Finalize Order
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
else
{
    <span>Loading form...</span>
}

<br />

<OrderItemTable ItemList="_selectedOrderItems" />

<SuccessNotification @ref="_notification" NavUrl="@_navUrl" />

@code {
    private SalesOrderViewModel _order = new SalesOrderViewModel();
    private List<SalesOrderItemViewModel> _orderItems = new List<SalesOrderItemViewModel>();
    private List<SalesOrderItemViewModel> _selectedOrderItems = new List<SalesOrderItemViewModel>();
    private SalesOrderItemViewModel _selectedOrderItem = new SalesOrderItemViewModel();
    private InventoryViewModel _selectedInventory = new InventoryViewModel();
    private SuccessNotification _notification = new SuccessNotification();
    private string _navUrl = "/orders";

    public List<ProductViewModel> Products = new List<ProductViewModel>();
    public PagingMetaData MetaData { get; set; } = new PagingMetaData();
    private PagingParameters _pagingParameters = new PagingParameters();

    protected override async Task OnInitializedAsync()
    {
        _pagingParameters.SetPrivatePageSize("PageSize", 50);

        await GetProducts();

        _selectedOrderItem = _orderItems[0];
    }

    private async Task GetProducts()
    {
        var pagingResponse = await ProductHttpRepository.GetProducts(_pagingParameters);
        Products = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;

        foreach (var prod in Products)
        {
            var item = new SalesOrderItemViewModel
                {
                    Id = prod.Id,
                    Product = prod
                };

            _orderItems.Add(item);
        }
    }

    private async Task HandleValidSubmit()
    {
        var product = await ProductHttpRepository.GetProductById(_selectedOrderItem.Id.ToString());

        _selectedOrderItem.Product = product;

        // Validate order item quantity is not more than product inventory quantity on hand
        var isAvailableQuantity = await IsQuantityOnHand(_selectedOrderItem);
        if (!isAvailableQuantity) 
        {
            // Pop up an alert informing desired quantity is not available
            await JSRuntime.InvokeVoidAsync(
                "alert", 
                $"Inventory has insufficient quantity of {_selectedInventory.QuantityOnHand}");
            return;
        }

        var itemExists = false;

        // Add to quantity of order item if already present in list
        foreach (var item in _selectedOrderItems)
        {
            if (_selectedOrderItem.Id == item.Id) 
            {
                itemExists = true;
                item.Quantity += _selectedOrderItem.Quantity;
            }
        }

        if (!itemExists) 
            _selectedOrderItems.Add(_selectedOrderItem);

        _selectedOrderItem = _orderItems[0];
    }

    private async Task FinalizeOrder() 
    {
        double totalCost = 0;

        foreach (var item in _selectedOrderItems)
        {
            totalCost += item.Product.Price * item.Quantity;
        }

        _order.OrderItems = _selectedOrderItems;
        _order.TotalCost = totalCost;

        await OrderHttpRepository.GenerateOrder(_order);
        _notification.Show();
    }

    private void Cancel() 
    {
        NavigationManager.NavigateTo("/orders");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/orders");
    }

    private async Task<bool> IsQuantityOnHand(SalesOrderItemViewModel orderItem) 
    {
        var product = orderItem.Product;
        _selectedInventory = await InventoryHttpRepository.GetInventoryByProductId(product.Id.ToString());
        var inventoryQuantityOnHand = _selectedInventory.QuantityOnHand;
        var currentListQuantity = 0;

        foreach (var item in _selectedOrderItems)
        {
            if (item.Id == orderItem.Id) 
            {
                currentListQuantity += item.Quantity;
            }
        }

        if (orderItem.Quantity + currentListQuantity > inventoryQuantityOnHand)
            return false;

        return true;
    }
}
