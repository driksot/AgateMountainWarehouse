@page "/inventories"

@implements IDisposable

@inject IInventoryHttpRepository InventoryHttpRepository
@inject IProductHttpRepository ProductHttpRepository
@inject NavigationManager NavigationManager
@inject HttpInterceptorService Interceptor
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@("Inventory Management".ToUpper())</MudText>

<MudTable ServerData="@(new Func<TableState, Task<TableData<InventoryViewModel>>>(ServerReload))"
          Dense="true" Hover="true" Striped="true" Bordered="true" CanCancelEdit="true" 
          CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Quantity updated"))" 
          RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
          @ref="_table">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 5%" />
        <col style="width: 75%" />
        <col style="width: 10%" />
        <col style="width: 10%" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="InventoryViewModel">Image</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name" T="InventoryViewModel">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="price" T="InventoryViewModel">Price</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="InventoryViewModel">Quantity on Hand</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Image">
                <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="@($"{APIEndpoints._serverBaseUrl}{@context.Product?.ImageUrl}")" />
        </MudTd>
        <MudTd DataLabel="Name">@context.Product?.Name</MudTd>
        <MudTd DataLabel="Price">@context.Product?.Price.ToString("c")</MudTd>
        <MudTd DataLabel="QuantityOnHand">@context.QuantityOnHand</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Image">
                <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="@($"{APIEndpoints._serverBaseUrl}{@context.Product?.ImageUrl}")" />
        </MudTd>
        <MudTd DataLabel="Name">@context.Product?.Name</MudTd>
        <MudTd DataLabel="Price">@context.Product?.Price.ToString("c")</MudTd>
        <MudTd DataLabel="QuantityOnHand">
            <MudNumericField @bind-Value="@context.QuantityOnHand" Required Min="0" />
        </MudTd>
    </RowEditingTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

    @code {
    public List<InventoryViewModel> Inventories { get; set; } = new List<InventoryViewModel>();
    private IEnumerable<InventoryViewModel> _inventories = new List<InventoryViewModel>();
    private MudTable<InventoryViewModel> _table = new MudTable<InventoryViewModel>();
    private PagingParameters _pagingParameters = new PagingParameters();
    private InventoryViewModel _elementBeforeEdit = new();
    private List<string> _editEvents = new();
    private string _searchString = string.Empty;

    public PagingMetaData MetaData { get; set; } = new PagingMetaData();
    public string Type { get; set; } = string.Empty;

    private async Task<TableData<InventoryViewModel>> ServerReload(TableState state)
    {
        _pagingParameters.SetPrivatePageSize("PageSize", state.PageSize);
        _pagingParameters.PageNumber = state.Page + 1;

        switch (state.SortLabel)
        {
            case "name":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "name desc"
                    : "name";
                break;
            case "price":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "price desc"
                    : "price";
                break;
        }

        var pagingResponse = await InventoryHttpRepository.GetInventories(_pagingParameters);
        _inventories = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;

        foreach (var inventory in _inventories)
        {
            var product = await ProductHttpRepository.GetProductById(inventory.ProductId.ToString());
            inventory.Product = product;
        }

        return new TableData<InventoryViewModel>() { TotalItems = MetaData.TotalCount, Items = _inventories };
    }

    private void OnSearch(string searchText)
    {
        _pagingParameters.SearchTerm = searchText;
        _table.ReloadServerData();
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
    }

    private void ClearEventLog()
    {
        _editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        _editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object inventory)
    {
        _elementBeforeEdit = new()
            {
                QuantityOnHand = ((InventoryViewModel)inventory).QuantityOnHand
            };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((InventoryViewModel)inventory).QuantityOnHand}");
    }

    private void ItemHasBeenCommitted(object inventory)
    {
        AddEditionEvent($"RowEditCommit event: Changes to Element {((InventoryViewModel)inventory).QuantityOnHand} committed");

        AdjustQuantity(
            new InventoryAdjustmentViewModel
            {
                InventoryId = ((InventoryViewModel)inventory).Id,
                Adjustment = ((InventoryViewModel)inventory).QuantityOnHand
            }
        );
    }

    private void ResetItemToOriginalValues(object inventory)
    {
        ((InventoryViewModel)inventory).QuantityOnHand = _elementBeforeEdit.QuantityOnHand;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((InventoryViewModel)inventory).QuantityOnHand} cancelled");
    }

    private void AdjustQuantity(InventoryAdjustmentViewModel inventoryAdjustment) 
    {
        InventoryHttpRepository.UpdateQuantityOnHand(inventoryAdjustment);
    }
}
