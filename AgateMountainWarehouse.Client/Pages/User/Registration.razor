@page "/registration"

@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@("Registration".ToUpper())</MudText>

@if (ShowRegistrationErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}

<EditForm Model="_userForRegistration" OnValidSubmit="Register" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />

    <MudCard Class="pa-4">
        <MudCardContent>

            <MudTextField @bind-Value="_userForRegistration.Email" Label="Email" Variant="Variant.Outlined" Class="mb-4" />
            <ValidationMessage For="@(() => _userForRegistration.Email)" />

            <MudTextField @bind-Value="_userForRegistration.Password" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" Class="mb-4" />
            <ValidationMessage For="@(() => _userForRegistration.Password)" />

            <MudTextField @bind-Value="_userForRegistration.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined" InputType="InputType.Password" Class="mb-4" />
            <ValidationMessage For="@(() => _userForRegistration.ConfirmPassword)" />

        </MudCardContent>
        <MudCardActions Class="ms-2 pb-2 d-flex justify-end">

            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.AppRegistration"
                       Color="Color.Primary"
                       ButtonType="MudBlazor.ButtonType.Submit">
                Register
            </MudButton>

        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private UserRegistrationViewModel _userForRegistration = new UserRegistrationViewModel();

    public bool ShowRegistrationErrors { get; set; }
    public IEnumerable<string> Errors { get; set; } = new List<string>();

    public async Task Register() 
    {
        ShowRegistrationErrors = false;

        var result = await AuthenticationService.RegisterUser(_userForRegistration);
        if (!result.IsSuccessfulRegistration) 
        {
            Errors = result.Errors;
            ShowRegistrationErrors = true;
        }
        else 
        {
            NavigationManager.NavigateTo("/");
        }
    }
}
