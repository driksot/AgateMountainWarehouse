@page "/login"

@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@("Log In".ToUpper())</MudText>

@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<EditForm Model="_userAuthentication" OnValidSubmit="ExecuteLogin">
    <DataAnnotationsValidator />
    <MudCard Class="pa-4">
        <MudCardContent>

            <MudTextField @bind-Value="_userAuthentication.Email" Label="Email" Variant="Variant.Outlined" Class="mb-4" />
            <ValidationMessage For="@(() => _userAuthentication.Email)" />

            <MudTextField @bind-Value="_userAuthentication.Password" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" Class="mb-4" />
            <ValidationMessage For="@(() => _userAuthentication.Password)" />

        </MudCardContent>
        <MudCardActions Class="ms-2 pb-2 d-flex justify-end">

            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Login"
                       Color="Color.Primary"
                       ButtonType="MudBlazor.ButtonType.Submit">
                Log In
            </MudButton>

        </MudCardActions>
    </MudCard>
 
</EditForm>

@code {
    private UserAuthenticationViewModel _userAuthentication = new UserAuthenticationViewModel();

    public bool ShowAuthError { get; set; }
    public string Error { get; set; } = string.Empty;

    public async Task ExecuteLogin() 
    {
        ShowAuthError = false;

        var result = await AuthenticationService.Login(_userAuthentication);
        if (!result.IsAuthSuccessful)
        {
            Error = result.ErrorMessage;
            ShowAuthError = true;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
}
