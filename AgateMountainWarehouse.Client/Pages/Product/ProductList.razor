@page "/products"

@implements IDisposable

@inject IProductHttpRepository ProductHttpRepository
@inject HttpInterceptorService Interceptor

<MudText Typo="Typo.h4" Class="card-title fw-bold mb-4" Color="Color.Primary">@($"Product Management".ToUpper())</MudText>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<ProductViewModel>>>(ServerReload))"
          Dense="true" Hover="true" Striped="true" Bordered="true" @ref="_table">
        <ToolBarContent>
            <MudButton Href="createproduct"
                   DisableElevation
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   IconColor="Color.Surface">New Product</MudButton>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width: 5%" />
            <col style="width: 10%" />
            <col style="width: 50%" />
            <col style="width: 5%" />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="ProductViewModel">Image</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name" T="ProductViewModel">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ProductViewModel">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="price" T="ProductViewModel">Price</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Image">
                <MudAvatar Color="Color.Transparent" Size="Size.Large" Image="@context.ImageUrl" />
            </MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Name">@context.Description</MudTd>
            <MudTd DataLabel="Price">@context.Price.ToString("c")</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Href="@($"updateproduct/{context.Id}")" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Class="ms-1 my-1">Edit</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="ms-1 my-1">Delete</MudButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @code {
    private IEnumerable<ProductViewModel> _products = new List<ProductViewModel>();
    private MudTable<ProductViewModel> _table = new MudTable<ProductViewModel>();
    private PagingParameters _pagingParameters = new PagingParameters();
    private int totalItems;
    private string _searchString = string.Empty;

    public PagingMetaData MetaData { get; set; } = new PagingMetaData();

    private async Task<TableData<ProductViewModel>> ServerReload(TableState state)
    {
        _pagingParameters.SetPrivatePageSize("PageSize", state.PageSize);
        _pagingParameters.PageNumber = state.Page + 1;

        switch (state.SortLabel)
        {
            case "name":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "name desc"
                    : "name";
                break;
            case "price":
                _pagingParameters.OrderBy = state.SortDirection == SortDirection.Descending
                    ? "price desc"
                    : "price";
                break;
        }

        var pagingResponse = await ProductHttpRepository.GetProducts(_pagingParameters);
        _products = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;

        return new TableData<ProductViewModel>() { TotalItems = MetaData.TotalCount, Items = _products };
    }

    private void OnSearch(string searchText)
    {
        _pagingParameters.SearchTerm = searchText;
        _table.ReloadServerData();
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
    }
}
