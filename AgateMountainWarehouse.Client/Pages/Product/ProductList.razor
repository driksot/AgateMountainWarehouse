@page "/products"

@inject IProductHttpRepository ProductHttpRepository
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        The user: @context.User.FindFirst(ClaimTypes.Name).Value is authorized
    </Authorized>
    <NotAuthorized>
        The User is not authorized
    </NotAuthorized>
</AuthorizeView>

<div class="row">
    <div class="col-md-2">
        <button
            type="button" 
            class="btn btn-primary"
            @onclick="AddProduct">Create Product</button>
    </div>
    <div class="col-md-10">
        <Search Type="@Type" OnSearchChanged="SearchChanged" />
    </div>
</div>
<div class="row">
    <div class="col mt-2">
        <ProductTable ProductList="Products" OnSortChanged="SortChanged" OnDeleted="DeleteProduct" />
    </div>
</div>
<div class="row">
    <div class="col">
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
    </div>
</div>

@code {
    public List<ProductViewModel> Products { get; set; } = new List<ProductViewModel>();
    public PagingMetaData MetaData { get; set; } = new PagingMetaData();
    public string Type { get; set; } = string.Empty;
    private PagingParameters _pagingParameters = new PagingParameters();

    protected override async Task OnInitializedAsync()
    {
        Type = "product";
        await GetProducts();
    }

    private async Task SelectedPage(int page) 
    {
        _pagingParameters.PageNumber = page;
        await GetProducts();
    }

    private async Task SearchChanged(string searchTerm) 
    {
        _pagingParameters.PageNumber = 1;
        _pagingParameters.SearchTerm = searchTerm;
        await GetProducts();
    }

    private async Task SortChanged(string orderBy) 
    {
        _pagingParameters.OrderBy = orderBy;
        await GetProducts();
    }

    private async Task GetProducts() 
    {
        var pagingResponse = await ProductHttpRepository.GetProducts(_pagingParameters);
        Products = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }

    private void AddProduct()
    {
        NavigationManager.NavigateTo("/createproduct");
    }

    private async Task DeleteProduct(Guid id) 
    {
        await ProductHttpRepository.DeleteProduct(id);
        _pagingParameters.PageNumber = 1;
        await GetProducts();
    }
}
